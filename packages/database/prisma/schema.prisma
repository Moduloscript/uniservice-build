generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/zod"
  addIncludeType   = "false"
  addSelectType    = "false"
  createInputTypes = "false"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AiChat {
  id             String        @id
  organizationId String?
  userId         String?
  title          String?
  messages       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  organization   organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Purchase {
  id             String        @id
  organizationId String?
  userId         String?
  type           PurchaseType
  customerId     String
  subscriptionId String?       @unique
  productId      String
  status         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  organization   organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
}

model ServiceCategory {
  id          String    @id
  name        String    @unique
  description String?
  services    service[]
}

model account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  expiresAt             DateTime?
  password              String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime

  user user @relation(fields: [userId], references: [id], name: "UserAccounts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model booking {
  id         String        @id
  studentId  String
  providerId String
  student    user            @relation("StudentBookings", fields: [studentId], references: [id])
  provider   user            @relation("ProviderBookings", fields: [providerId], references: [id])
  serviceId  String
  service    service         @relation(fields: [serviceId], references: [id])
  status     BookingStatus @default(PENDING)
  dateTime   DateTime
  createdAt  DateTime      @default(now())
  updatedAt  DateTime
  review     review?
}

model invitation {
  id             String       @id
  organizationId String
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model member {
  id             String       @id
  organizationId String
  userId         String
  role           String
  createdAt      DateTime
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model organization {
  id                 String       @id
  name               String
  slug               String?      @unique
  logo               String?
  createdAt          DateTime
  metadata           String?
  paymentsCustomerId String?
  AiChat             AiChat[]
  Purchase           Purchase[]
  invitation         invitation[]
  member             member[]
}

model passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model payment {
  id             String          @id
  amount         Decimal
  currency       String          @default("NGN")
  status         PaymentStatus
  provider       PaymentProvider
  transactionRef String          @unique
  paymentMethod  String
  bookingId      String          @unique
  providerId     String
  escrowStatus   EscrowStatus?
  metadata       Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
}

model payout_account {
  id            String          @id
  userId        String
  provider      PaymentProvider
  accountNumber String
  accountName   String
  bankCode      String
  bankName      String
  isDefault     Boolean         @default(false)
  metadata      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model review {
  id        String   @id
  rating    Int      @db.SmallInt
  comment   String?
  bookingId String   @unique
  authorId  String
  targetId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  
  booking   booking  @relation(fields: [bookingId], references: [id])
  author    user     @relation("AuthoredReviews", fields: [authorId], references: [id])
  target    user     @relation("ReceivedReviews", fields: [targetId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model service {
  id          String   @id
  name        String
  description String
  price       Decimal
  duration    Int
  providerId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  isActive    Boolean  @default(true)
  categoryId  String
  provider    user     @relation("ProvidedServices", fields: [providerId], references: [id])
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  bookings    booking[]

  @@index([categoryId])
}

model session {
  id                   String   @id
  expiresAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  impersonatedBy       String?
  activeOrganizationId String?
  token                String   @unique
  createdAt            DateTime
  updatedAt            DateTime
}

model slot {
  id          String   @id
  userId      String
  dayOfWeek   Int
  startTime   DateTime @db.Time(6)
  endTime     DateTime @db.Time(6)
  isAvailable Boolean  @default(true)

  @@unique([userId, dayOfWeek, startTime, endTime])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user {
  id                       String              @id
  name                     String
  email                    String              @unique
  emailVerified            Boolean
  image                    String?
  createdAt                DateTime
  updatedAt                DateTime
  username                 String?             @unique
  role                     String?
  banned                   Boolean?
  banReason                String?
  banExpires               DateTime?
  onboardingComplete       Boolean             @default(false)
  paymentsCustomerId       String?
  locale                   String?
  userType                 UserType?
  matricNumber             String?             @unique
  department               String?
  level                    Int?
  verified                 Boolean             @default(false)
  verificationDoc          String?
  isStudentVerified        Boolean             @default(false)
  isVerified               Boolean             @default(false)
  studentIdCardUrl         String?
  verificationNotes        String?
  verificationReviewedAt   DateTime?
  verificationReviewedBy   String?
  verificationStatus       VerificationStatus? @default(PENDING)
  providerCategory         String?
  providerVerificationDocs Json?

  services           service[]       @relation("ProvidedServices")
  providedBookings   booking[]       @relation("ProviderBookings")
  studentBookings    booking[]       @relation("StudentBookings")
  accounts           account[]       @relation("UserAccounts")
  authoredReviews    review[]        @relation("AuthoredReviews")
  receivedReviews    review[]        @relation("ReceivedReviews")

  @@index([userType])
}

model verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum EscrowStatus {
  HELD
  RELEASED
  REFUNDED
}

enum PaymentProvider {
  PAYSTACK
  FLUTTERWAVE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  DISPUTED
}

enum PurchaseType {
  SUBSCRIPTION
  ONE_TIME
}

enum UserType {
  STUDENT
  PROVIDER
  ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}
