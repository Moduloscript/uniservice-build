generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/zod"
  addIncludeType   = "false"
  addSelectType    = "false"
  createInputTypes = "false"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AiChat {
  id             String        @id
  organizationId String?
  userId         String?
  title          String?
  messages       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Purchase {
  id             String        @id
  organizationId String?
  userId         String?
  type           PurchaseType
  customerId     String
  subscriptionId String?       @unique
  productId      String
  status         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
}

model ServiceCategory {
  id          String    @id
  name        String    @unique
  description String?
  services    service[]
}

model account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  expiresAt             DateTime?
  password              String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime    @updatedAt

  user user @relation(fields: [userId], references: [id], name: "UserAccounts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model booking {
  id           String        @id
  studentId    String
  providerId   String
  student      user          @relation("StudentBookings", fields: [studentId], references: [id])
  provider     user          @relation("ProviderBookings", fields: [providerId], references: [id])
  serviceId    String
  service      service       @relation(fields: [serviceId], references: [id])
  status       BookingStatus @default(PENDING)
  scheduledFor DateTime?     // Renamed from dateTime for clarity, made optional for migration
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  messages     Message[]
  review       review?
  payment      payment?
  earning      Earning?
}

model invitation {
  id             String       @id
  organizationId String
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model member {
  id             String       @id
  organizationId String
  userId         String
  role           String
  createdAt      DateTime
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model organization {
  id                 String       @id
  name               String
  slug               String?      @unique
  logo               String?
  createdAt          DateTime
  metadata           String?
  paymentsCustomerId String?
  AiChat             AiChat[]
  Purchase           Purchase[]
  invitation         invitation[]
  member             member[]
}

model passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model payment {
  id              String          @id
  amount          Decimal
  currency        String          @default("NGN")
  status          PaymentStatus
  provider        PaymentProvider
  transactionRef  String          @unique
  paymentMethod   String?         // card, bank, ussd, mobile_money, etc.
  channel         String?         // Actual channel used (from Paystack/Flutterwave)
  gatewayResponse String?         // Gateway response message
  fees            Decimal?        // Transaction fees
  paidAt          DateTime?       // Actual payment time
  bookingId       String          @unique
  providerId      String
  escrowStatus    EscrowStatus?
  authorizationCode String?       // For recurring payments
  customerCode    String?         // Paystack customer code
  metadata        Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Flutterwave specific fields
  flutterwaveId   String?         @unique // Flutterwave transaction ID
  flutterwaveRef  String?         @unique // Flutterwave reference
  verifiedAt      DateTime?       // When transaction was verified
  
  booking         booking         @relation(fields: [bookingId], references: [id])
}

model payout_account {
  id            String          @id
  userId        String
  provider      PaymentProvider
  accountNumber String
  accountName   String
  bankCode      String
  bankName      String
  isDefault     Boolean         @default(false)
  metadata      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model review {
  id        String   @id
  rating    Int      @db.SmallInt
  comment   String?
  bookingId String   @unique
  authorId  String
  targetId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  booking   booking  @relation(fields: [bookingId], references: [id])
  author    user     @relation("AuthoredReviews", fields: [authorId], references: [id])
  target    user     @relation("ReceivedReviews", fields: [targetId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model service {
  id               String            @id
  name             String
  description      String
  price            Decimal
  duration         Int
  providerId       String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime    @updatedAt
  isActive         Boolean           @default(true)
  categoryId       String
  // Dynamic service stats fields
  availabilityStatus AvailabilityStatus @default(AVAILABLE)
  serviceLevel      ServiceLevel?     @default(BEGINNER)
  maxStudents       Int              @default(1)
  provider         user                   @relation("ProvidedServices", fields: [providerId], references: [id])
  category         ServiceCategory        @relation(fields: [categoryId], references: [id])
  bookings         booking[]
  features         ServiceFeatures[]
  outcomes         ServiceOutcomes[]
  availability     ProviderAvailability[] @relation("ServiceAvailability")

  @@index([categoryId])
  @@index([availabilityStatus])
  @@index([serviceLevel])
}

/// Service features - what's included with each service (customizable by providers)
model ServiceFeatures {
  id          String   @id
  serviceId   String
  title       String
  description String?
  icon        String   @default("check-circle")
  orderIndex  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  service     service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@index([serviceId])
  @@index([serviceId, orderIndex])
}

/// Service learning outcomes - what students will achieve/learn (customizable by providers)
model ServiceOutcomes {
  id          String   @id
  serviceId   String
  title       String
  description String?
  icon        String   @default("target")
  orderIndex  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  service     service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@index([serviceId])
  @@index([serviceId, orderIndex])
}

model session {
  id                   String   @id
  expiresAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  impersonatedBy       String?
  activeOrganizationId String?
  token                String   @unique
  createdAt            DateTime
  updatedAt            DateTime    @updatedAt
}

model slot {
  id          String   @id
  userId      String
  dayOfWeek   Int
  startTime   DateTime @db.Time(6)
  endTime     DateTime @db.Time(6)
  isAvailable Boolean  @default(true)

  @@unique([userId, dayOfWeek, startTime, endTime])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user {
  id                       String              @id
  name                     String
  email                    String              @unique
  emailVerified            Boolean
  image                    String?
  createdAt                DateTime
  updatedAt                DateTime    @updatedAt
  username                 String?             @unique
  role                     String?
  banned                   Boolean?
  banReason                String?
  banExpires               DateTime?
  onboardingComplete       Boolean             @default(false)
  paymentsCustomerId       String?
  locale                   String?
  userType                 UserType?
  matricNumber             String?             @unique
  department               String?
  level                    Int?
  verified                 Boolean             @default(false)
  verificationDoc          String?
  isStudentVerified        Boolean             @default(false)
  isVerified               Boolean             @default(false)
  studentIdCardUrl         String?
  verificationNotes        String?
  verificationReviewedAt   DateTime?
  verificationReviewedBy   String?
  verificationStatus       VerificationStatus? @default(PENDING)
  providerCategory         String?
  providerVerificationDocs Json?

  // Additional profile fields
  phone                    String?
  bio                      String?
  location                 String?
  dateOfBirth              DateTime?

  services             service[]             @relation("ProvidedServices")
  providedBookings     booking[]             @relation("ProviderBookings")
  studentBookings      booking[]             @relation("StudentBookings")
  accounts             account[]             @relation("UserAccounts")
  authoredReviews      review[]              @relation("AuthoredReviews")
  receivedReviews      review[]              @relation("ReceivedReviews")
  providerAvailability ProviderAvailability[] @relation("ProviderAvailability")
  notificationSettings NotificationSettings?
  sentMessages         Message[]
  earnings            Earning[]
  payouts             Payout[]

  @@index([userType])
}

model verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

/// Provider availability for real-time booking calendar management
model ProviderAvailability {
  id               String   @id @default(uuid())
  providerId       String
  serviceId        String?
  date             DateTime @db.Date
  startTime        DateTime @db.Time(6)
  endTime          DateTime @db.Time(6)
  isAvailable      Boolean  @default(true)
  isBooked         Boolean  @default(false)
  maxBookings      Int      @default(1)
  currentBookings  Int      @default(0)
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  provider         user     @relation("ProviderAvailability", fields: [providerId], references: [id], onDelete: Cascade)
  service          service? @relation("ServiceAvailability", fields: [serviceId], references: [id], onDelete: SetNull)
  
  @@unique([providerId, date, startTime])
  @@index([providerId])
  @@index([serviceId])
  @@index([date])
  @@index([date, providerId])
}

/// Earnings tracking for providers - tracks every payment that should result in earnings
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Earning {
  id            String        @id @default(uuid())
  providerId    String        // Provider who earned this amount
  bookingId     String        @unique // Related booking
  amount        Decimal       // Amount earned (after platform fees)
  platformFee   Decimal?      // Platform fee deducted
  grossAmount   Decimal       // Original service price
  currency      String        @default("NGN")
  status        EarningStatus @default(PENDING_CLEARANCE)
  clearedAt     DateTime?     // When funds became available for payout
  payoutId      String?       // If paid out, reference to payout
  metadata      Json?         // Additional earning details
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  provider      user          @relation(fields: [providerId], references: [id], onDelete: Cascade)
  booking       booking       @relation(fields: [bookingId], references: [id])
  payout        Payout?       @relation(fields: [payoutId], references: [id])
  
  @@index([providerId])
  @@index([status])
  @@index([clearedAt])
  @@index([providerId, status])
}

/// Payout requests and tracking for providers
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Payout {
  id                String          @id @default(uuid())
  providerId        String          // Provider requesting payout
  amount            Decimal         // Total payout amount
  currency          String          @default("NGN")
  status            PayoutStatus    @default(REQUESTED)
  paymentProvider   PaymentProvider // Which provider to use for payout
  accountNumber     String          // Bank account number
  accountName       String          // Account holder name
  bankCode          String          // Bank code
  bankName          String          // Bank name
  transactionRef    String?         @unique // Payment provider transaction reference
  gatewayResponse   String?         // Response from payment gateway
  fees              Decimal?        // Processing fees
  netAmount         Decimal?        // Amount after fees
  processedAt       DateTime?       // When payout was processed
  failureReason     String?         // Reason for failure if failed
  metadata          Json?           // Additional payout details
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  provider          user            @relation(fields: [providerId], references: [id], onDelete: Cascade)
  earnings          Earning[]       // Earnings included in this payout
  
  @@index([providerId])
  @@index([status])
  @@index([processedAt])
  @@index([providerId, status])
}

/// Messages for booking-related communication
model Message {
  id          String      @id @default(uuid())
  bookingId   String
  senderId    String
  content     String      @db.Text
  type        MessageType @default(TEXT)
  metadata    Json?       // For storing read receipts, reactions, etc.
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  booking     booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  sender      user        @relation(fields: [senderId], references: [id])
  
  // Indexes for performance
  @@index([bookingId])
  @@index([senderId])
  @@index([createdAt])
  @@index([bookingId, createdAt])
}

/// User notification preferences
/// Webhook events tracking for security and audit
model webhook_event {
  id          String    @id @default(uuid())
  provider    String    // paystack, flutterwave
  event_type  String    // charge.success, transfer.failed, etc.
  reference   String    // transaction reference
  processed   Boolean   @default(false)
  retry_count Int       @default(0)
  payload     Json      // Full webhook payload
  error       String?   // Error message if processing failed
  signature   String?   // Webhook signature for verification
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  
  @@index([reference])
  @@index([processed])
  @@index([provider, event_type])
}

model NotificationSettings {
  id                      String    @id @default(uuid())
  userId                  String    @unique
  
  // Email notifications
  emailBookingConfirmations Boolean  @default(true)
  emailBookingReminders     Boolean  @default(true)
  emailBookingUpdates       Boolean  @default(true)
  emailPaymentConfirmations Boolean  @default(true)
  emailReviewRequests       Boolean  @default(true)
  emailPromotions           Boolean  @default(false)
  
  // SMS notifications  
  smsBookingReminders      Boolean  @default(false)
  smsBookingConfirmations  Boolean  @default(false)
  smsPaymentAlerts         Boolean  @default(false)
  smsEmergencyAlerts       Boolean  @default(true)
  
  // Push notifications
  pushBookingUpdates       Boolean  @default(true)
  pushNewMessages          Boolean  @default(true)
  pushProviderUpdates      Boolean  @default(false)
  pushPromotions           Boolean  @default(false)
  
  // Timing preferences
  reminderTiming           String   @default("2h")
  digestFrequency          String   @default("weekly")
  
  // Communication preferences
  communicationLanguage    String   @default("en")
  timezone                 String   @default("Africa/Lagos")
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  user                    user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum EscrowStatus {
  HELD
  RELEASED
  REFUNDED
}

enum PaymentProvider {
  PAYSTACK
  FLUTTERWAVE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  DISPUTED
  ABANDONED
}

enum PurchaseType {
  SUBSCRIPTION
  ONE_TIME
}

enum UserType {
  STUDENT
  PROVIDER
  ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AvailabilityStatus {
  AVAILABLE
  BUSY
  UNAVAILABLE
  LIMITED
}

enum ServiceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum EarningStatus {
  PENDING_CLEARANCE
  AVAILABLE
  PAID_OUT
  FROZEN
}

enum PayoutStatus {
  REQUESTED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum MessageType {
  TEXT
  SYSTEM
  ATTACHMENT
}
